generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["typedSql"]
  binaryTargets   = ["native", "debian-openssl-3.0.x"]
}

generator zod {
  provider = "zod-prisma-types"
  output   = "../src/.prisma/generated/zod"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               String      @id @db.VarChar(50)
  name             String      @db.VarChar(50)
  email            String      @unique @db.VarChar(50)
  emailVerified    Boolean
  image            String?     @db.Text
  createdAt        DateTime
  updatedAt        DateTime
  twoFactorEnabled Boolean?
  username         String?     @unique @db.VarChar(50)
  inviteCode       String?     @db.VarChar(50)
  accounts         Account[]
  sessions         Session[]
  twofactors       TwoFactor[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?  @db.Text
  userAgent String?  @db.Text
  userId    String   @db.VarChar(50)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "session_userId_fkey")
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String    @db.Text
  providerId            String    @db.Text
  userId                String    @db.VarChar(50)
  accessToken           String?   @db.Text
  refreshToken          String?   @db.Text
  idToken               String?   @db.Text
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?   @db.Text
  password              String?   @db.Text
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "account_userId_fkey")
  @@map("account")
}

model Verification {
  id         String    @id
  identifier String    @db.Text
  value      String    @db.Text
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model TwoFactor {
  id          String @id
  secret      String @db.Text
  backupCodes String @db.Text
  userId      String @db.VarChar(50)
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "twoFactor_userId_fkey")
  @@map("twoFactor")
}

model PhrLabResult {
  id                  Int       @id @default(autoincrement())
  userId              String?   @map("user_id")
  testName            String?   @map("test_name") @db.VarChar(255)
  collectionDatetime  DateTime? @map("collection_datetime") @db.DateTime(0)
  resultDatetime      DateTime? @map("result_datetime") @db.DateTime(0)
  resultStatus        String?   @map("result_status") @db.VarChar(50)
  orderingProvider    String?   @map("ordering_provider") @db.VarChar(100)
  resultingLab        String?   @map("resulting_lab") @db.VarChar(100)
  analyte             String?   @db.VarChar(100)
  value               String?   @db.VarChar(20)
  unit                String?   @db.VarChar(20)
  rangeMin            Decimal?  @map("range_min") @db.Decimal(10, 2)
  rangeMax            Decimal?  @map("range_max") @db.Decimal(10, 2)
  rangeUnit           String?   @map("range_unit") @db.VarChar(20)
  normalValue         String?   @map("normal_value") @db.VarChar(50)
  messageFromProvider String?   @map("message_from_provider") @db.MediumText
  resultComment       String?   @map("result_comment") @db.MediumText
  labDirector         String?   @map("lab_director") @db.VarChar(100)

  @@map("phr_lab_results")
}

model ProductKey {
  id               Int     @id @default(autoincrement())
  uid              String?
  productId        String? @map("product_id") @db.VarChar(100)
  productKey       String? @unique(map: "product_key") @map("product_key") @db.VarChar(2000)
  productName      String? @map("product_name") @db.VarChar(100)
  computerName     String? @map("computer_name") @db.VarChar(100)
  comment          String? @db.VarChar(2000)
  usedOn           String? @map("used_on") @db.Char(10)
  claimedDate      String? @map("claimed_date") @db.VarChar(100)
  keyType          String? @map("key_type") @db.VarChar(100)
  keyRetrievalNote String? @map("key_retrieval_note") @db.MediumText

  @@map("product_keys")
}

model FinAccounts {
  acct_id                Int       @id @default(autoincrement())
  acct_owner             String    @db.VarChar(50)
  acct_name              String    @db.VarChar(50)
  acct_last_balance      String    @default("0") @db.VarChar(20)
  acct_last_balance_date DateTime? @db.DateTime(0)
  acct_is_debt           Boolean   @default(false) @db.Bit(1)
  acct_is_retirement     Boolean   @default(false) @db.Bit(1)
  acct_sort_order        Int       @default(0)
  when_deleted           DateTime? @db.DateTime(0)

  @@unique([acct_owner, acct_name], map: "acct_owner")
  @@map("fin_accounts")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model FinAccountLineItems {
  t_id               Int                          @id @default(autoincrement())
  t_account          Int?
  t_date             String                       @db.VarChar(10)
  t_date_posted      String?                      @db.VarChar(10)
  t_type             String?
  t_schc_category    String?
  t_amt              Decimal?                     @db.Decimal(13, 4)
  t_symbol           String?                      @db.VarChar(20)
  t_qty              Float                        @default(0) @db.Float
  t_price            Decimal?                     @db.Decimal(13, 4)
  t_commission       Decimal?                     @db.Decimal(13, 4)
  t_fee              Decimal?                     @db.Decimal(13, 4)
  t_method           String?                      @db.VarChar(20)
  t_source           String?                      @db.VarChar(20)
  t_origin           String?                      @db.VarChar(20)
  opt_expiration     String?                      @db.VarChar(10)
  opt_type           account_line_items_opt_type?
  opt_strike         Decimal?                     @db.Decimal(13, 4)
  t_description      String?                      @db.VarChar(255)
  t_comment          String?                      @db.VarChar(255)
  t_from             String?                      @db.VarChar(10)
  t_to               String?                      @db.VarChar(10)
  t_interest_rate    String?                      @db.VarChar(20)
  t_cusip            String?                      @db.VarChar(20)
  t_harvested_amount Decimal?                     @db.Decimal(13, 4)
  parent_t_id        Int?
  when_added         DateTime?                    @db.DateTime(0)
  when_deleted       DateTime?                    @db.DateTime(0)
  tags               FinAccountLineItemTagMap[]

  @@index([t_account], map: "accounting_accounts_acct_id_fk")
  @@map("fin_account_line_items")
}

model FinAccountBalanceSnapshot {
  snapshot_id Int      @id @default(autoincrement())
  acct_id     Int
  balance     String   @db.VarChar(20)
  when_added  DateTime @default(now()) @db.DateTime(0)

  @@index([acct_id], map: "fin_accounts_acct_id_fk")
  @@map("fin_account_balance_snapshot")
}

model EarningsAnnual {
  symbol           String   @db.Char(5)
  fiscalDateEnding DateTime @db.Date
  reportedEPS      Decimal? @db.Decimal(10, 4)

  @@id([symbol, fiscalDateEnding])
  @@map("earnings_annual")
}

model EarningsQuarterly {
  symbol             String    @db.Char(5)
  fiscalDateEnding   DateTime  @db.Date
  reportedDate       DateTime? @db.Date
  reportedEPS        Decimal?  @db.Decimal(10, 4)
  estimatedEPS       Decimal?  @db.Decimal(10, 4)
  surprise           Decimal?  @db.Decimal(10, 4)
  surprisePercentage Decimal?  @db.Decimal(10, 4)

  @@id([symbol, fiscalDateEnding])
  @@map("earnings_quarterly")
}

model FinEquityAwards {
  id          Int      @id @default(autoincrement())
  award_id    String   @db.Char(20)
  grant_date  String   @db.Char(10)
  vest_date   String   @db.Char(10)
  share_count Int
  symbol      String   @db.Char(4)
  uid         String   @db.VarChar(50)
  vest_price  Decimal? @db.Decimal(10, 2)

  @@unique([grant_date, award_id, vest_date, symbol], map: "fin_equity_awards_pk")
  @@map("fin_equity_awards")
}

model FinPayslips {
  payslip_id           Int       @id @default(autoincrement())
  uid                  String?   @db.VarChar(50)
  period_start         DateTime? @db.Date
  period_end           DateTime? @db.Date
  pay_date             DateTime? @db.Date
  earnings_gross       Decimal?  @db.Decimal(10, 4)
  earnings_bonus       Decimal?  @db.Decimal(10, 4)
  earnings_net_pay     Decimal   @default(0.0000) @db.Decimal(10, 4)
  earnings_rsu         Decimal?  @db.Decimal(10, 4)
  imp_other            Decimal?  @db.Decimal(10, 4)
  imp_legal            Decimal?  @default(0.0000) @db.Decimal(10, 4)
  imp_fitness          Decimal?  @default(0.0000) @db.Decimal(10, 4)
  imp_ltd              Decimal?  @default(0.0000) @db.Decimal(10, 4)
  ps_oasdi             Decimal?  @db.Decimal(10, 4)
  ps_medicare          Decimal?  @db.Decimal(10, 4)
  ps_fed_tax           Decimal?  @db.Decimal(10, 4)
  ps_fed_tax_addl      Decimal?  @db.Decimal(10, 4)
  ps_state_tax         Decimal?  @db.Decimal(10, 4)
  ps_state_tax_addl    Decimal?  @db.Decimal(10, 4)
  ps_state_disability  Decimal?  @db.Decimal(10, 4)
  ps_401k_pretax       Decimal?  @db.Decimal(10, 4)
  ps_401k_aftertax     Decimal?  @db.Decimal(10, 4)
  ps_401k_employer     Decimal?  @db.Decimal(6, 2)
  ps_fed_tax_refunded  Decimal?  @db.Decimal(10, 4)
  ps_payslip_file_hash String?   @db.VarChar(50)
  ps_is_estimated      Boolean   @default(true)
  ps_comment           String?   @db.VarChar(1000)
  ps_pretax_medical    Decimal   @default(0.0000) @db.Decimal(10, 4)
  ps_pretax_fsa        Decimal   @default(0.0000) @db.Decimal(10, 4)
  ps_salary            Decimal   @default(0.0000) @db.Decimal(10, 4)
  ps_vacation_payout   Decimal   @default(0.0000) @db.Decimal(10, 4)
  ps_pretax_dental     Decimal   @default(0.0000) @db.Decimal(10, 4)
  ps_pretax_vision     Decimal   @default(0.0000) @db.Decimal(10, 4)
  other                String?   @db.MediumText

  @@unique([uid, period_start, period_end, pay_date], map: "fin_payslip_pk")
  @@map("fin_payslip")
}

model FinPayslipUploads {
  id          Int     @id @default(autoincrement())
  file_name   String? @db.VarChar(200)
  file_hash   String? @db.VarChar(50)
  parsed_json String? @db.LongText

  @@map("fin_payslip_uploads")
}

model GraduatedTax {
  year        Int
  region      String             @db.Char(2)
  income_over Int
  type        graduated_tax_type @default(s)
  rate        Decimal            @db.Decimal(10, 4)
  verified    Boolean            @default(dbgenerated("(b'0')")) @db.Bit(1)

  @@unique([year, region, income_over, type], map: "graduated_tax_pk")
  @@map("graduated_tax")
}

model PHRPatientVitals {
  id          Int       @id @default(autoincrement())
  user_id     String?   @db.VarChar(50)
  vital_name  String?   @db.VarChar(255)
  vital_date  DateTime? @db.Date
  vital_value String?   @db.VarChar(255)

  @@map("phr_patient_vitals")
}

model StockQuotes {
  c_date  DateTime @db.Date
  c_time  DateTime @db.Time(0)
  c_symb  String   @db.Char(5)
  c_open  Decimal  @db.Decimal(10, 4)
  c_high  Decimal  @db.Decimal(10, 4)
  c_low   Decimal  @db.Decimal(10, 4)
  c_close Decimal  @db.Decimal(10, 4)
  c_vol   Int      @db.MediumInt

  @@index([c_date, c_time, c_symb], map: "c_date")
  @@index([c_symb(length: 2)], map: "symbol")
  @@ignore
}

model StockQuotesDaily {
  c_date  DateTime @db.Date
  c_symb  String   @db.Char(5)
  c_open  Decimal  @db.Decimal(10, 4)
  c_high  Decimal  @db.Decimal(10, 4)
  c_low   Decimal  @db.Decimal(10, 4)
  c_close Decimal  @db.Decimal(10, 4)
  c_vol   BigInt

  @@unique([c_symb, c_date], map: "c_date")
  @@index([c_symb], map: "symbol")
  @@map("stock_quotes_daily")
}

model TimeSeriesDatapoint {
  dp_id             Int              @id @default(autoincrement())
  dp_series_id      Int
  dp_date           DateTime?        @db.Date
  dp_value          String?          @db.VarChar(20)
  dp_comment        String?          @db.MediumText
  timeseries_series TimeSeriesSeries @relation(fields: [dp_series_id], references: [id], onUpdate: Restrict, map: "timeseries_datapoint_timeseries_series_id_fk")

  @@index([dp_series_id], map: "timeseries_datapoint_timeseries_series_id_fk")
  @@map("timeseries_datapoint")
}

model TimeSeriesDocument {
  id                Int                @id @default(autoincrement())
  uid               Int
  name              String             @db.VarChar(50)
  timeseries_series TimeSeriesSeries[]

  @@map("timeseries_documents")
}

model TimeSeriesSeries {
  id                   Int                   @id @default(autoincrement())
  document_id          Int
  series_name          String                @db.VarChar(50)
  timeseries_datapoint TimeSeriesDatapoint[]
  timeseries_documents TimeSeriesDocument    @relation(fields: [document_id], references: [id], onUpdate: Restrict, map: "timeseries_series_timeseries_documents_id_fk")

  @@index([document_id], map: "timeseries_series_timeseries_documents_id_fk")
  @@map("timeseries_series")
}

model UsersLegacy {
  uid                   BigInt    @id @default(autoincrement())
  email                 String    @unique(map: "users_pk") @db.VarChar(50)
  pw                    String?   @db.VarChar(100)
  salt                  BigInt    @default(0)
  alias                 String?   @db.VarChar(50)
  ax_maxmin             Boolean   @default(false)
  ax_homes              Boolean?  @default(false)
  ax_tax                Boolean   @default(false)
  ax_evdb               Boolean?  @default(false)
  ax_spgp               Boolean   @default(false)
  ax_phr                Int       @default(0) @db.TinyInt
  reset_token           String?   @db.VarChar(64)
  reset_requested_at    DateTime? @db.DateTime(0)
  passkey_credential_id String?   @db.VarChar(255)
  passkey_public_key    String?   @db.Text

  @@map("users_legacy")
}

model VXCVFiles {
  hash          Bytes    @id @db.Binary(20)
  filename      String   @db.VarChar(150)
  mime          String   @db.VarChar(30)
  downloads     Int      @default(0)
  max_downloads Int      @default(7)
  size          Int
  uploaded      DateTime @db.DateTime(0)
  blocked       Int      @default(0) @db.TinyInt
  ip            Int

  @@map("vxcv_files")
}

model VXCVLinks {
  uniqueid String @id @db.Char(5)
  url      String @db.VarChar(15000)

  @@index([url(length: 15)], map: "url")
  @@map("vxcv_links")
}

enum graduated_tax_type {
  s
  mfj
  mfs
  hoh
}

enum account_line_items_opt_type {
  call
  put
}

model AccountLineItemTag {
  tag_id      Int     @id @default(autoincrement())
  tag_userid  String
  tag_color   String
  tag_label   String
  
  @@unique([tag_userid, tag_label])
}

model FinAccountTag {
  tag_id                   Int                        @id @default(autoincrement())
  tag_userid               String                     @db.VarChar(50)
  tag_color                String                     @db.VarChar(20)
  tag_label                String                     @db.VarChar(50)
  when_added               DateTime                   @default(now()) @db.DateTime(0)
  when_deleted             DateTime?                  @db.DateTime(0)
  FinAccountLineItemTagMap FinAccountLineItemTagMap[]

  @@unique([tag_userid, tag_label], map: "unique_tag_per_user")
  @@map("fin_account_tag")
}

model FinAccountLineItemTagMap {
  id           Int       @id @default(autoincrement())
  when_added   DateTime  @default(now()) @db.DateTime(0)
  when_deleted DateTime? @db.DateTime(0)

  t_id   Int
  tag_id Int

  transaction FinAccountLineItems @relation(fields: [t_id], references: [t_id], onDelete: Cascade, onUpdate: Cascade)
  tag         FinAccountTag       @relation(fields: [tag_id], references: [tag_id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([t_id, tag_id], map: "unique_tag_per_transaction")
  @@map("fin_account_line_item_tag_map")
}
